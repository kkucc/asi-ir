/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_TimeTagger_WRAP_H_
#define SWIG_TimeTagger_WRAP_H_

#include <map>
#include <string>


class SwigDirector_CustomLogger : public CustomLogger, public Swig::Director {

public:
    SwigDirector_CustomLogger(PyObject *self);
    virtual ~SwigDirector_CustomLogger();
    virtual void Log(int level,std::string const &msg);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class CustomLogger doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[1];
#endif

};


class SwigDirector_CustomMeasurementBase : public CustomMeasurementBase, public Swig::Director {

public:
    SwigDirector_CustomMeasurementBase(PyObject *self,TimeTaggerBase *tagger);
    virtual ~SwigDirector_CustomMeasurementBase();
    virtual void clear_impl();
    virtual void clear_implSwigPublic() {
      CustomMeasurementBase::clear_impl();
    }
    virtual void on_start();
    virtual void on_startSwigPublic() {
      CustomMeasurementBase::on_start();
    }
    virtual void on_stop();
    virtual void on_stopSwigPublic() {
      CustomMeasurementBase::on_stop();
    }
    virtual bool next_impl(std::vector< Tag,std::allocator< Tag > > &incoming_tags,long long begin_time,long long end_time);
    virtual bool next_implSwigPublic(std::vector< Tag,std::allocator< Tag > > &incoming_tags,long long begin_time,long long end_time) {
      return CustomMeasurementBase::next_impl(incoming_tags,begin_time,end_time);
    }
    virtual void next_impl_cs(void *tags_ptr,uint64_t num_tags,long long begin_time,long long end_time);
    virtual void next_impl_csSwigPublic(void *tags_ptr,uint64_t num_tags,long long begin_time,long long end_time) {
      CustomMeasurementBase::next_impl_cs(tags_ptr,num_tags,begin_time,end_time);
    }

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class CustomMeasurementBase doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[5];
#endif

};


class SwigDirector_FlimBase : public FlimBase, public Swig::Director {

public:
    SwigDirector_FlimBase(PyObject *self,TimeTaggerBase *tagger,int start_channel,int click_channel,int pixel_begin_channel,uint32_t n_pixels,uint32_t n_bins,long long binwidth,int pixel_end_channel=CHANNEL_UNUSED,int frame_begin_channel=CHANNEL_UNUSED,uint32_t finish_after_outputframe=0,uint32_t n_frame_average=1,bool pre_initialize=true);
    virtual ~SwigDirector_FlimBase();
    virtual void frameReady(uint32_t frame_number,std::vector< uint32_t,std::allocator< uint32_t > > &data,std::vector< long long,std::allocator< long long > > &pixel_begin_times,std::vector< long long,std::allocator< long long > > &pixel_end_times,long long frame_begin_time,long long frame_end_time);
    virtual void frameReadySwigPublic(uint32_t frame_number,std::vector< uint32_t,std::allocator< uint32_t > > &data,std::vector< long long,std::allocator< long long > > &pixel_begin_times,std::vector< long long,std::allocator< long long > > &pixel_end_times,long long frame_begin_time,long long frame_end_time) {
      FlimBase::frameReady(frame_number,data,pixel_begin_times,pixel_end_times,frame_begin_time,frame_end_time);
    }

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class FlimBase doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[1];
#endif

};


class SwigDirector_Flim : public Flim, public Swig::Director {

public:
    SwigDirector_Flim(PyObject *self,TimeTaggerBase *tagger,int start_channel,int click_channel,int pixel_begin_channel,uint32_t n_pixels,uint32_t n_bins,long long binwidth,int pixel_end_channel=CHANNEL_UNUSED,int frame_begin_channel=CHANNEL_UNUSED,uint32_t finish_after_outputframe=0,uint32_t n_frame_average=1,bool pre_initialize=true);
    virtual ~SwigDirector_Flim();
    virtual void frameReady(uint32_t frame_number,std::vector< uint32_t,std::allocator< uint32_t > > &data,std::vector< long long,std::allocator< long long > > &pixel_begin_times,std::vector< long long,std::allocator< long long > > &pixel_end_times,long long frame_begin_time,long long frame_end_time);
    virtual void frameReadySwigPublic(uint32_t frame_number,std::vector< uint32_t,std::allocator< uint32_t > > &data,std::vector< long long,std::allocator< long long > > &pixel_begin_times,std::vector< long long,std::allocator< long long > > &pixel_end_times,long long frame_begin_time,long long frame_end_time) {
      Flim::frameReady(frame_number,data,pixel_begin_times,pixel_end_times,frame_begin_time,frame_end_time);
    }

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class Flim doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[1];
#endif

};


class SwigDirector_Experimental_PhotonGenerator : public Experimental::PhotonGenerator, public Swig::Director {

public:
    SwigDirector_Experimental_PhotonGenerator(PyObject *self,TimeTaggerBase *tagger,double countrate,int base_channel,int32_t seed=-1);
    virtual ~SwigDirector_Experimental_PhotonGenerator();
    virtual void clear_impl();
    virtual void clear_implSwigPublic() {
      IteratorBase::clear_impl();
    }
    virtual void on_start();
    virtual void on_startSwigPublic() {
      IteratorBase::on_start();
    }
    virtual void on_stop();
    virtual void on_stopSwigPublic() {
      Experimental::SignalGeneratorBase::on_stop();
    }
    virtual bool next_impl(std::vector< Tag,std::allocator< Tag > > &incoming_tags,long long begin_time,long long end_time);
    virtual bool next_implSwigPublic(std::vector< Tag,std::allocator< Tag > > &incoming_tags,long long begin_time,long long end_time) {
      return Experimental::SignalGeneratorBase::next_impl(incoming_tags,begin_time,end_time);
    }
    virtual void initialize(long long initial_time);
    virtual void initializeSwigPublic(long long initial_time) {
      Experimental::PhotonGenerator::initialize(initial_time);
    }
    virtual long long get_next();
    virtual long long get_nextSwigPublic() {
      return Experimental::PhotonGenerator::get_next();
    }
    virtual void on_restart(long long restart_time);
    virtual void on_restartSwigPublic(long long restart_time) {
      Experimental::PhotonGenerator::on_restart(restart_time);
    }
    virtual double get_intensity();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class Experimental_PhotonGenerator doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[8];
#endif

};


#endif
